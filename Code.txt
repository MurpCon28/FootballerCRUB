public class DemoApp {

    public static void main(String[] args) {
        // TODO code application logic here
        Scanner keyboard = new Scanner(System.in);

        Model model = Model.getInstance();

        Footballer f;

        int opt;
        do {
            System.out.println("********* FOOTBALLER MAIN MENU ********");
            System.out.println("1. Create a new Footballer");
            System.out.println("2. View all Footballers");
            System.out.println("3. Edit a Footballers by ID");
            System.out.println("4. Delete a Footballers by ID");
            System.out.println("5. Search for Footballer by ID");
            System.out.println("6. Search for Team");
            System.out.println("7. Exit Program");
            System.out.println();

            System.out.print("Enter option: ");
            String line = keyboard.nextLine();
            opt = Integer.parseInt(line);

            switch (opt) {
                //when the user choose option 1 they can create and input values into a list.
                case 1: {

                    f = readFootballer(keyboard);

                    //Method addFootballer() is called in model. 
                    model.addFootballer(f);
                    break;
                }
                // when the user choses option 2 the footballers are displayed in an array list from the model. 
                case 2: {

                    // get the footballers from the model and prints footballers.
                    printFootballers(model.getFootballers());
                    break;
                }
                // when the user choses option 3 the user can enter the footballer id to edit the footballer details. 
                case 3: {
                    
                    //Method updateFootballer() is located in model and is called to perform. 
                    updateFootballer(keyboard, model);
                    break;
                }
                
                // when the user choses option 4 the user can enter the footballer id to delete the footballer details from the database
                case 4: {
                    deleteFootballer(keyboard, model);
                    break;
                }

                // when the user choses option 5 the user can enter the footballer id to view the one footballer details
                case 5: {
                    searchFootballer(keyboard, model.showFootballers());
                    break;
                }

                // when the user choses option 6 the user can enter a team and view all the footballers that are apart of the searched team
                case 6: {
                    List<Footballer> footballersByTeam = searchTeam(keyboard, model.showFootballers());
                    printFootballers(footballersByTeam);

                    break;
                }

            }
        } while (opt != 7);
        System.out.println("Goodbye");
    }

    //creates a footballer and is added to the database
    private static Footballer readFootballer(Scanner keyboard) {
        String name, team, position, skills;
        int goal, assists;
        double salary;

        System.out.print("Enter name : ");
        name = keyboard.nextLine();

        System.out.print("Enter team : ");
        team = keyboard.nextLine();

        System.out.print("Enter position : ");
        position = keyboard.nextLine();

        System.out.print("Enter goal : ");
        goal = keyboard.nextInt();
        keyboard.nextLine();

        System.out.print("Enter assists : ");
        assists = keyboard.nextInt();
        keyboard.nextLine();

        System.out.print("Enter salary : ");
        salary = keyboard.nextDouble();
        keyboard.nextLine();

        System.out.print("Enter skill : ");
        skills = keyboard.nextLine();

        //Footballer object f passes in the variables name, team, position, goal, assists, skills and salary
        Footballer f = new Footballer(name, team, position, goal, assists, skills, salary);

        //footballer object f calls method
        return f;

    }

    //shows all info about all footballers in the database
    private static void printFootballers(List<Footballer> footballers) {

        for (Footballer ft : footballers) {
            System.out.println(ft.toString());
        }
    }

    //Updates the footballer from the database
    private static void updateFootballer(Scanner keyboard, Model model) {
     
        System.out.print("Enter a footballer ID to update their details : ");
        int id = keyboard.nextInt();
        keyboard.nextLine();

        //If the footballer ID exists this the updating code appears
        Footballer f = model.findFootballerById(id);
        if (f != null) {
            System.out.println("\n Footballer found, updating it! ");
            System.out.print("Update name : ");
            f.setName(keyboard.nextLine());

            System.out.print("Update team : ");
            f.setTeam(keyboard.nextLine());

            System.out.print("Update position : ");
            f.setPosition(keyboard.nextLine());

            System.out.print("Update goal : ");
            f.setGoal(Integer.parseInt(keyboard.nextLine()));

            System.out.print("Update assists : ");
            f.setAssists(Integer.parseInt(keyboard.nextLine()));

            System.out.print("Update salary : ");
            f.setSalary(Double.parseDouble(keyboard.nextLine()));

            System.out.print("Update skill : ");
            f.setSkills(keyboard.nextLine());
           
            //if the update is susessful it prints out the next line
            if (model.updateFootballer(f)) {
                System.out.println("\nFootballer updated");
            } else {
                //else if it didnt update correctly it prints the next
                System.out.println("\nFootballer was not updated");
            }
        } else {
            //if the footballer ID doesnt exsist this line of code is printed
            System.out.println("\nFootballer was not found");
        }
     
    }

    //Deletes the footballer from the database
    private static void deleteFootballer(Scanner keyboard, Model model) {

        // User is assked for footballer id to be deleted
        System.out.print("Enter the ID of the footballer to delete: ");
        int id = Integer.parseInt(keyboard.nextLine());
        Footballer f;

        f = model.findFootballerById(id);
        if (f != null) {

            if (model.removeFootballer(f)) {
                System.out.println("\nFootballer deleted");
            } else {

                System.out.println("\nFootballer exists but was not deleted");
            }
        } else {
            System.out.println("\nFootballer was not found");
        }
    }

    //searches the database for info about a single footballer
    private static void searchFootballer(Scanner keyboard, List<Footballer> footballers) {

        // User is assked for footballer id they liked to be printed
        System.out.print("Enter the ID of the footballer you'd like to view: ");
        int id = Integer.parseInt(keyboard.nextLine());
        Footballer f;

        for (Footballer ft : footballers) {
            //if statement to print all the footballer info if their id is entered
            if (ft.getId() == id) {
                System.out.println(ft.toString());
            }
        }
    }

    //searches the database for info about footballers in a team
    private static List<Footballer> searchTeam(Scanner keyboard, List<Footballer> footballers) {

        // User is assked for the team they liked to know what footballers play for them
        List<Footballer> footballersByTeam = new ArrayList();
        System.out.print("Enter the team name you'd like to view: ");
        String team = keyboard.nextLine();
        for (Footballer ft : footballers) {
            //if statement to print all the footballer info if they are apart of the team
            if (ft.getTeam().equalsIgnoreCase(team)) {
//                System.out.println("Footballer found!");
                footballersByTeam.add(ft);
            } 
        }
        //if the footballer team is not the same as the one inputted this is printed 
        if (footballersByTeam.isEmpty()) {
            System.out.println("\nNo footballers in this team!");
        }
        return footballersByTeam;
    }

}





public class Model {

    private static Model instance = null;

    public static synchronized Model getInstance() {
        if (instance == null) {
            instance = new Model();
        }
        return instance;
    }

    private List<Footballer> footballers;

    private FootballerTableGateway gateway;

    private Model() {

        try {
            //Connects to the database and pass this connection to the tablegateway so it can communicate with the database
            Connection conn = DBConnection.getInstance();
            this.gateway = new FootballerTableGateway(conn);

            this.footballers = gateway.getFootballers();
//            this.footballers = new ArrayList();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    // returns the array list of footballers to the program.
//    public List<Footballer> getFootballer() {
//        return new ArrayList<>(this.footballers);
//    }
    //the database adds a footballer to the database. 
    public void addFootballer(Footballer f) {
        try {

            // call a method that is in the FootballerTableGateway to put the footballer object into the database
            Footballer pWithID = this.gateway.insertFootballer(f);

            //  Add the footballer object into the arraylist
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error couldnt create a footballer in the database");
        }
    }

    //the database gets all the data about the footballer an prints them out
    public List<Footballer> getFootballers() {
        try {

            this.footballers = this.gateway.getFootballers();
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error couldnt get footballer info");
        }

        return footballers;
    }

    //updates the database to add new info to a footballer in the database. 
    public boolean updateFootballer(Footballer f) {

        boolean updated = false;
        try {

            // updates a method that is in the FootballerTableGateway to update the footballer object into the database
            updated = this.gateway.editFootballer(f);

            if (updated) {
                return updated;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("SQL Exception");
        }

        return updated;
    }

    //searches the database by all the footballers id's
    Footballer findFootballerById(int id) {
        Footballer f = null;
        int i = 0;
        boolean found = false;
        while (i < this.footballers.size() && !found) {
            f = this.footballers.get(i);
            if (f.getId() == id) {
                found = true;
            } else {
                i++;
            }
        }
        if (!found) {
            f = null;
        }
        return f;
    }

    //removes footballers from the databsae by their id's
    boolean removeFootballer(Footballer f) {
        boolean deleted = false;
        try {
            deleted = this.gateway.deleteFootballer(f);

            if (deleted) {
                this.footballers.remove(f);
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error couldnt delete footballer from database");
        }

        // return even if the delete is true or false;
        return deleted;
    }

    //shows all the info for a single footballer by thier id
    public List<Footballer> showFootballers() {
        try {

            this.footballers = this.gateway.showFootballer();
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error couldnt get footballer info");
        }

        return footballers;
    }

    //shows all the footballers in a team that is searhced by their name, which is a string
    public List<Footballer> showTeam() {
        try {
            this.footballers = this.gateway.showTeam();
        } catch (SQLException ex) {
//            Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error couldnt get team info");
        }

        return footballers;
    }
}



public class FootballerTableGateway {
    private static final String TABLE_NAME = "footballer";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_TEAM = "team";
    private static final String COLUMN_POSITION = "position";
    private static final String COLUMN_GOAL = "goal";
    private static final String COLUMN_ASSISTS = "assists";
    private static final String COLUMN_SKILLS = "skills";
    private static final String COLUMN_SALARY = "salary";

    private Connection mConnection;

    public FootballerTableGateway(Connection connection) {
        mConnection = connection;
    }

    public Footballer insertFootballer(Footballer f) throws SQLException {
       
       

        String query;                   //execute the sql query
        PreparedStatement stmt;         
        int numRowsAffected;
        int id;

        // SQL INSERT statement has place holders for the values so it can be added to the database
        query = "INSERT INTO " + TABLE_NAME + " (" +
                COLUMN_NAME + ", " +
                COLUMN_TEAM + ", " +
                COLUMN_POSITION + ", " +
                COLUMN_GOAL + ", " +
                COLUMN_ASSISTS + ", " +
                COLUMN_SKILLS + ", " +
                COLUMN_SALARY +
                ") VALUES (?, ?, ?, ?, ?, ?, ?)";

        // a PreparedStatement object that executes the query and adds the values into the query
        stmt = mConnection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, f.getName());
        stmt.setString(2, f.getTeam());
        stmt.setString(3, f.getPosition());
        stmt.setInt(4, f.getGoal());
        stmt.setInt(5, f.getAssists());
        stmt.setString(6, f.getSkills());
        stmt.setDouble(7, f.getSalary());

        //  execute the query and make sure that one and only one row was inserted into the database
        numRowsAffected = stmt.executeUpdate();
       
        if (numRowsAffected == 1) {
            // if one row was inserted, retrieve the id assigned to that row and create a footballer object to return
            ResultSet keys = stmt.getGeneratedKeys();
            keys.next();

            id = keys.getInt(1);
            f.setId(id);
          
        }

        // return the footballer object with a new id,
        return f;
    }

    // calls method from the model
    public List<Footballer> getFootballers() throws SQLException {
        String query;                   
        Statement stmt;                 
        ResultSet rs;                   
        List<Footballer> footballers;   
                                        

        String name, team, position, skills;
        int id, goal, assists;
        double salary;

        Footballer f;                   

        // executes the SQL SELECT statement to get java.util.ResultSet to show results of the statement
        query = "SELECT * FROM " + TABLE_NAME;
        
        stmt = this.mConnection.createStatement();
        // rs is a ResultSet object. Has rows of data from the database. 
        rs = stmt.executeQuery(query);

 
        footballers = new ArrayList<Footballer>();
    
        // loop of result getting data from footballer datebase, footballer object with data and put into an arraylist
        while (rs.next()) {
            id = rs.getInt(COLUMN_ID);
            name = rs.getString(COLUMN_NAME);
            team = rs.getString(COLUMN_TEAM);
            position = rs.getString(COLUMN_POSITION);
            goal = rs.getInt(COLUMN_GOAL);
            assists = rs.getInt(COLUMN_ASSISTS);
            skills = rs.getString(COLUMN_SKILLS);
            salary = rs.getDouble(COLUMN_SALARY);
       
            // new footballer f using the variables from Footballer
            f = new Footballer(id, name, team, position, 
                        goal, assists, skills, salary);
            footballers.add(f);
        }

        // returns the arraylist of Footballer objects into the model. 
        return footballers;
    }
    
    public boolean editFootballer(Footballer f) throws SQLException {
       
       

        String query;    
        String query2;  //execute the sql query
        PreparedStatement stmt;         
        int numRowsAffected;
        int id;

        // SQL Update statement has place holders for the values so it can be updated to the database
        query = "UPDATE " + TABLE_NAME + " SET " + COLUMN_NAME + "=?, " + COLUMN_TEAM + "=?, " + COLUMN_POSITION + "=?, " + COLUMN_GOAL + "=?, " + COLUMN_ASSISTS + "=?, " + COLUMN_SKILLS + "=?, " + COLUMN_SALARY + "=? " + "WHERE " + COLUMN_ID + "=?";             

        // a PreparedStatement object that executes the query and adds the values into the query
        stmt = mConnection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, f.getName());
        stmt.setString(2, f.getTeam());
        stmt.setString(3, f.getPosition());
        stmt.setInt(4, f.getGoal());
        stmt.setInt(5, f.getAssists());
        stmt.setString(6, f.getSkills());
        stmt.setDouble(7, f.getSalary());
        stmt.setInt(8, f.getId());
 
        //prints what was updated into the area fields of footballer, used for spotting errors that might occur
//        System.out.println("*******************" + stmt.toString());
        
        numRowsAffected = stmt.executeUpdate();
       
        // if numRowsAffected is 1 then the return is true
        if (numRowsAffected == 1) {
          return true;
          
        }

        // return false when the update has an error
        return false;
    }
    
    public boolean deleteFootballer(Footballer f)  throws SQLException {
        String query;                 
        PreparedStatement stmt;        
        int numRowsAffected;
        int id;

       
        query = "DELETE FROM " + TABLE_NAME + " WHERE " + COLUMN_ID + "= ?";
        
        stmt = mConnection.prepareStatement(query);
        stmt.setInt(1, f.getId());
       
        // prints to test if the delete works
        System.out.println("\n\nTHE SQL LOOKS LIKE THIS " + stmt.toString() + "\n\n");

        numRowsAffected = stmt.executeUpdate();
        if (numRowsAffected == 1) {
          return true;
        }
        return false;
    }
    
    public List<Footballer> showFootballer() throws SQLException {
        String query;                   
        Statement stmt;                 
        ResultSet rs;                   
        List<Footballer> footballers;   
                                        

        String name, team, position, skills;
        int id, goal, assists;
        double salary;

        Footballer f;                   

        // executes the SQL SELECT statement to get java.util.ResultSet to show results of the statement
        query = "SELECT * FROM " + TABLE_NAME;
        
        stmt = this.mConnection.createStatement();
        // rs is a ResultSet object. Has rows of data from the database. 
        rs = stmt.executeQuery(query);

 
        footballers = new ArrayList<Footballer>();
    
        // loop of result getting data from footballer datebase, footballer object with data and put into an arraylist
        while (rs.next()) {
            id = rs.getInt(COLUMN_ID);
            name = rs.getString(COLUMN_NAME);
            team = rs.getString(COLUMN_TEAM);
            position = rs.getString(COLUMN_POSITION);
            goal = rs.getInt(COLUMN_GOAL);
            assists = rs.getInt(COLUMN_ASSISTS);
            skills = rs.getString(COLUMN_SKILLS);
            salary = rs.getDouble(COLUMN_SALARY);
       
            // new footballer f using the variables from Footballer
            f = new Footballer(id, name, team, position, 
                        goal, assists, skills, salary);
            footballers.add(f);
        }

        // returns the arraylist of Footballer objects into the model. 
        return footballers;
    }
    
    
    public List<Footballer> showTeam() throws SQLException {
        String query;                   
        Statement stmt;                 
        ResultSet rs;                   
        List<Footballer> footballers;   
                                        

        String name, team, position, skills;
        int id, goal, assists;
        double salary;

        Footballer f;                   

        // performs the SQL SELECT statement to get java.util.ResultSet to show results of the statement which is looking for every footballer that is in a certain team
         query = "SELECT * FROM " + TABLE_NAME + " WHERE " + COLUMN_TEAM + " LIKE '%%'";
        
//        stmt = mConnection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);

        stmt = this.mConnection.createStatement();
        rs = stmt.executeQuery(query);

 
        footballers = new ArrayList<Footballer>();
    
        // loop of result getting data from footballer datebase, footballer object with data and put into an arraylist
        while (rs.next()) {
            id = rs.getInt(COLUMN_ID);
            name = rs.getString(COLUMN_NAME);
            team = rs.getString(COLUMN_TEAM);
            position = rs.getString(COLUMN_POSITION);
            goal = rs.getInt(COLUMN_GOAL);
            assists = rs.getInt(COLUMN_ASSISTS);
            skills = rs.getString(COLUMN_SKILLS);
            salary = rs.getDouble(COLUMN_SALARY);
       
            // new footballer f using the variables from Footballer
            f = new Footballer(id, name, team, position, 
                        goal, assists, skills, salary);
            footballers.add(f);
        }

        // returns the arraylist of Footballer objects into the model. 
        return footballers;
    }
  
}